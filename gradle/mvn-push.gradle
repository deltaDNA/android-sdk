/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return "https://maven.pkg.github.com/deltaDNA/android-sdk"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : ""
}

def getReleaseRepositoryUsername() {
    return System.getenv("GITHUB_ACTOR")
}

def getReleaseRepositoryPassword() {
    return System.getenv("GITHUB_TOKEN")
}

def getSnapshotRepositoryUsername() {
    return hasProperty('MAVEN_SNAPSHOT_USERNAME') ? MAVEN_SNAPSHOT_USERNAME : ""
}

def getSnapshotRepositoryPassword() {
    return hasProperty('MAVEN_SNAPSHOT_PASSWORD') ? MAVEN_SNAPSHOT_PASSWORD : ""
}

afterEvaluate { project ->
    /*
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getReleaseRepositoryUsername(), password: getReleaseRepositoryPassword())
                }
//                snapshotRepository(url: getSnapshotRepositoryUrl()) {
//                    authentication(userName: getSnapshotRepositoryUsername(), password: getSnapshotRepositoryPassword())
//                }
                
                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    
                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }
                    
                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL 
                            distribution POM_LICENCE_DIST
                        }
                    }
                }
            }
        }
    }
    */
    
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
    
    task androidJavadocs(type: Javadoc) {
        failOnError false // FIXME :library-notifications:androidJavadocs fails
        source = android.sourceSets.main.java.srcDirs
        title = "$POM_NAME $VERSION_NAME API"
        //options.links('http://docs.oracle.com/javase/6/docs/api/')
        options.linksOffline('http://d.android.com/reference', "${android.sdkDirectory}/docs/reference")
        options.linksOffline('http://developers.google.com/android/reference', "${android.sdkDirectory}/extras/google/google_play_services/docs/reference")
        classpath += files(android.libraryVariants.toList().first().javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())
    }
    
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
    
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
    
    // https://github.com/chrisbanes/gradle-mvn-push/pull/41
    task installArchives(type: Upload) {
        description 'Installs the artifacts to the local Maven repository.'
        group       'Upload'
        
        configuration = configurations['archives']
        
        repositories {
            mavenDeployer {
                pom.groupId    = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version    = VERSION_NAME

                repository url: "file://${System.properties['user.home']}/.m2/repository"
            }
        }
    }

    publishing {
      repositories {
        maven {
          name = "GitHubPackages"
          url = "https://maven.pkg.github.com/deltaDNA/android-sdk"
          credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
          }
        }
      }
    }
}
